"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YahooFinance = void 0;
const date_fns_1 = require("date-fns");
const puppeteer = require("puppeteer");
const BASE_URL = 'https://finance.yahoo.com';
class YahooFinance {
    static async getEarnings(date = new Date(), options) {
        const reportDate = date_fns_1.format(date, 'yyyy-MM-dd');
        const url = `${BASE_URL}/calendar/earnings?day=${date_fns_1.format(date, reportDate)}`;
        return this.getEarningsTable(url, reportDate, options);
    }
    static async getEarningsTable(url, reportDate, options) {
        const earnings = [];
        const browser = await puppeteer.launch(options);
        const page = await browser.newPage();
        await page.goto(url);
        const data = await page.evaluate(() => {
            const tds = Array.from(document.querySelectorAll('table tr td'));
            return tds.map((td) => td.innerText);
        });
        for (let i = 0; i < data.length; i += 6) {
            const epsEstimate = data[i + 3] !== '-' ? Number(data[i + 3]) : undefined;
            const epsReported = data[i + 4] !== '-' ? Number(data[i + 4]) : undefined;
            const epsSurprise = data[i + 5] !== '-' ? Number(data[i + 5]) : undefined;
            earnings.push({
                epsEstimate,
                epsReported,
                epsSurprise,
                reportDate,
                symbol: data[i],
                company: data[i + 1],
                announceTime: data[i + 2],
                epsSurpriseDollar: epsReported && epsEstimate ? Number((epsReported - epsEstimate).toFixed(2)) : undefined
            });
        }
        await browser.close();
        return earnings;
    }
}
exports.YahooFinance = YahooFinance;
//# sourceMappingURL=yahoo.js.map